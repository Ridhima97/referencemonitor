TYPE="type"
ARGS="args"
RETURN="return"
EXCP="exceptions"
TARGET="target"
FUNC="func"
OBJC="objc"

class ABFile():
  def __init__(self,filename,create):
    # globals
    mycontext['debug'] = False   
    # local (per object) reference to the underlying file
    if '_' in filename:
        exitall()
    self.Afn = filename+'.a'
    self.Bfn = filename+'.b'
    flag = False
    if self.Afn not in listfiles() and self.Bfn not in listfiles() and create == False:
        exitall()
    if self.Afn not in listfiles() and create == True:
        if self.Bfn in listfiles():
            removefile(self.Bfn)
        flag = True
    
    try:
        self.Afile = openfile(self.Afn,create)
        self.Bfile = openfile(self.Bfn,create)
    except:
        exitall();

    self.lock = createlock()
    self.Bfile.lock = createlock()
    self.Afile.lock = createlock()
    if flag:
        self.Afile.writeat('SE',0)
    #self.Afile = openfile(self.Afn,False)
    #self.Bfile = openfile(self.Bfn,True) 
    #content = self.Afile.readat(None,0)
    #self.Bfile.writeat(content,0)

  def writeat(self,data,offset):
    self.lock.acquire(True)
    if(offset < 0 or offset > len(self.Bfile.readat(None,0))):
        exitall()
    self.Bfile.lock.acquire(True)
    self.Bfile.writeat(data,offset)
    self.Bfile.lock.release()
    self.lock.release()

  
  def readat(self,bytes,offset):
    self.lock.acquire(True)
    if(offset < 0):
        exitall()
    self.Bfile.lock.acquire(True)    
    value = self.Afile.readat(bytes,offset)
    self.Bfile.lock.release()
    self.lock.release()
    return value

  def close(self):
    self.lock.acquire(True)
    conlist = []
    acontent = self.Afile.readat(None,0) 
    bcontent = self.Bfile.readat(None,0)
    #log(len(bcontent))
    if (len(bcontent) <=1): 
        exitall() 
    conlist = list(bcontent)
    try: 
        if (conlist[0] == 'S'and conlist[-1] == 'E'): 
            self.Afile.close()
            removefile(self.Afn)
            self.Afile = openfile(self.Afn,True)
            self.Afile.writeat(bcontent,0)
            #log(self.Afile.readat(None,0))
        else: 
            self.Bfile.close()
            removefile(self.Bfn)
            self.Bfile = openfile(self.Bfn,True)
            self.Bfile.writeat(acontent,0)

    except:
        pass 
        
    self.Afile.close()
    self.Bfile.close()
    #removefile(self.Bfn)
    self.lock.release()



def ABopenfile(filename, create):
    return ABFile(filename,create)




# The code here sets up type checking and variable hiding for you.  You
# should not need to change anything below here.
sec_file_def = {"obj-type":ABFile,
                "name":"ABFile",
                "writeat":{"type":"func","args":(str,(int,long)),"exceptions":Exception,"return":(int,type(None)),"target":ABFile.writeat},
                "readat":{"type":"func","args":((int,long,type(None)),(int,long)),"exceptions":Exception,"return":str,"target":ABFile.readat},
                "close":{"type":"func","args":None,"exceptions":None,"return":(bool,type(None)),"target":ABFile.close}
           }

CHILD_CONTEXT_DEF["ABopenfile"] = {TYPE:OBJC,ARGS:(str,bool),EXCP:Exception,RETURN:sec_file_def,TARGET:ABopenfile}

# Execute the user code
secure_dispatch_module()
